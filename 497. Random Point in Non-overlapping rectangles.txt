class Solution {

    private int[][] rects;
    private int[] prefixSums;
    private Random random;

    public Solution(int[][] rects) {
        this.rects = rects;
        this.prefixSums = new int[rects.length];
        this.random = new Random();

        // Calculate prefix sums based on the number of points in each rectangle
        int sum = 0;
        for (int i = 0; i < rects.length; i++) {
            int[] rect = rects[i];
            int points = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);
            sum += points;
            prefixSums[i] = sum;
        }
    }

    public int[] pick() {
        // Pick a random point index
        int pointIndex = random.nextInt(prefixSums[prefixSums.length - 1]) + 1;

        // Find the corresponding rectangle using binary search
        int rectIndex = binarySearch(pointIndex);

        // Pick a random point within the chosen rectangle
        int[] rect = rects[rectIndex];
        int x = random.nextInt(rect[2] - rect[0] + 1) + rect[0];
        int y = random.nextInt(rect[3] - rect[1] + 1) + rect[1];

        return new int[]{x, y};
    }

    private int binarySearch(int target) {
        int left = 0, right = prefixSums.length - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (prefixSums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }  
    
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(rects);
 * int[] param_1 = obj.pick();
 */