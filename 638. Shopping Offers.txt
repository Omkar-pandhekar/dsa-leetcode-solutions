class Solution {
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
         Map<List<Integer>, Integer> memo = new HashMap<>();
        return dfs(price, special, needs, memo);
    }

    private int dfs(List<Integer> price, List<List<Integer>> special, List<Integer> needs, Map<List<Integer>, Integer> memo) {
        if (memo.containsKey(needs)) {
            return memo.get(needs);
        }

        int minCost = 0;
        for (int i = 0; i < needs.size(); i++) {
            minCost += needs.get(i) * price.get(i);
        }

        for (List<Integer> offer : special) {
            List<Integer> newNeeds = new ArrayList<>(needs);
            boolean valid = true;

            for (int i = 0; i < needs.size(); i++) {
                newNeeds.set(i, newNeeds.get(i) - offer.get(i));
                if (newNeeds.get(i) < 0) {
                    valid = false; 
                    break;
                }
            }

            if (valid) {
                minCost = Math.min(minCost, offer.get(needs.size()) + dfs(price, special, newNeeds, memo));
            }
        }

        memo.put(needs, minCost);
        return minCost;
    }
}